{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { types } from \"../types/types\";\nimport { noteLogout } from './notes';\nimport { finishLoading, startLoading } from './ui';\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(finishLoading());\n    }).catch(e => {\n      dispatch(finishLoading());\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n    });\n  };\n};\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n    dispatch(noteLogout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/home/david/Escritorio/React/08-journal-app-19/src/actions/auth.js"],"names":["Swal","firebase","googleAuthProvider","types","noteLogout","finishLoading","startLoading","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","login","uid","displayName","catch","e","fire","message","startRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","startGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,6BAA7C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,MAA5C;AAEA,OAAO,MAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxD,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AAEAL,IAAAA,QAAQ,CAACU,IAAT,GAAgBC,0BAAhB,CAA2CJ,KAA3C,EAAkDC,QAAlD,EACKI,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChBJ,MAAAA,QAAQ,CAACK,KAAK,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,WAAhB,CAAN,CAAR;AAEAP,MAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACH,KALL,EAMKa,KANL,CAMWC,CAAC,IAAI;AACRT,MAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACAL,MAAAA,IAAI,CAACoB,IAAL,CAAU,OAAV,EAAmBD,CAAC,CAACE,OAArB,EAA8B,OAA9B;AACH,KATL;AAUH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMC,kCAAkC,GAAG,CAACd,KAAD,EAAQC,QAAR,EAAkBc,IAAlB,KAA2B;AACzE,SAAQb,QAAD,IAAc;AACjBT,IAAAA,QAAQ,CAACU,IAAT,GAAgBa,8BAAhB,CAA+ChB,KAA/C,EAAsDC,QAAtD,EACKI,IADL,CACU,OAAO;AAAEC,MAAAA;AAAF,KAAP,KAAoB;AACtB,YAAMA,IAAI,CAACW,aAAL,CAAmB;AAAER,QAAAA,WAAW,EAAEM;AAAf,OAAnB,CAAN;AACAb,MAAAA,QAAQ,CAAEK,KAAK,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,WAAhB,CAAP,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,CAAC,IAAI;AACRnB,MAAAA,IAAI,CAACoB,IAAL,CAAU,OAAV,EAAmBD,CAAC,CAACE,OAArB,EAA8B,OAA9B;AACH,KAPL;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AAClC,SAAQhB,QAAD,IAAc;AACjBT,IAAAA,QAAQ,CAACU,IAAT,GAAgBgB,eAAhB,CAAgCzB,kBAAhC,EACKW,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChBJ,MAAAA,QAAQ,CAAEK,KAAK,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,WAAhB,CAAP,CAAR;AACH,KAHL;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMF,KAAK,GAAG,CAACC,GAAD,EAAMC,WAAN,MAAuB;AAExCW,EAAAA,IAAI,EAAEzB,KAAK,CAACY,KAF4B;AAGxCc,EAAAA,OAAO,EAAE;AACLb,IAAAA,GADK;AAELC,IAAAA;AAFK;AAH+B,CAAvB,CAAd;AAUP,OAAO,MAAMa,WAAW,GAAG,MAAM;AAC7B,SAAO,MAAMpB,QAAN,IAAmB;AACtB,UAAMT,QAAQ,CAACU,IAAT,GAAgBoB,OAAhB,EAAN;AAEArB,IAAAA,QAAQ,CAACsB,MAAM,EAAP,CAAR;AACAtB,IAAAA,QAAQ,CAACN,UAAU,EAAX,CAAR;AAEH,GAND;AAOH,CARM;AAUP,OAAO,MAAM4B,MAAM,GAAG,OAAO;AACzBJ,EAAAA,IAAI,EAAEzB,KAAK,CAAC6B;AADa,CAAP,CAAf","sourcesContent":["import Swal from 'sweetalert2';\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { types } from \"../types/types\";\nimport { noteLogout } from './notes';\nimport { finishLoading, startLoading } from './ui';\n\nexport const startLoginEmailPassword = (email, password) => {\n    return (dispatch) => {\n        dispatch(startLoading());\n\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(({ user }) => {\n                dispatch(login(user.uid, user.displayName));\n\n                dispatch(finishLoading());\n            })\n            .catch(e => {\n                dispatch(finishLoading());\n                Swal.fire('Error', e.message, 'error');\n            })\n    }\n}\n\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n    return (dispatch) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password)\n            .then(async ({ user }) => {\n                await user.updateProfile({ displayName: name });\n                dispatch( login(user.uid, user.displayName));\n            })\n            .catch(e => {\n                Swal.fire('Error', e.message, 'error');\n            })\n    }\n}\n\nexport const startGoogleLogin = () => {\n    return (dispatch) => {\n        firebase.auth().signInWithPopup(googleAuthProvider)\n            .then(({ user }) => {\n                dispatch( login(user.uid, user.displayName));\n            });\n    }\n}\n\nexport const login = (uid, displayName) => ({\n\n    type: types.login,\n    payload: {\n        uid,\n        displayName\n    }\n\n});\n\nexport const startLogout = () => {\n    return async(dispatch) => {\n        await firebase.auth().signOut();\n\n        dispatch(logout());\n        dispatch(noteLogout());\n\n    }\n}\n\nexport const logout = () => ({\n    type: types.logout\n});"]},"metadata":{},"sourceType":"module"}