{"ast":null,"code":"import { types } from \"../types/types\";\nconst initialState = {\n  notes: [],\n  active: null\n};\nexport const notesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.notesActive:\n      return { ...state,\n        active: { ...action.payload\n        }\n      };\n\n    case types.notesAddNew:\n      return { ...state,\n        notes: [action.payload, ...state.notes]\n      };\n\n    case types.notesLoad:\n      return { ...state,\n        notes: [...action.payload]\n      };\n\n    case types.notesUpdate:\n      return { ...state,\n        notes: state.notes.map(note => note.id === action.payload.id ? action.payload.note : note)\n      };\n\n    case types.notesDelete:\n      return { ...state,\n        active: null,\n        notes: state.notes.filter(note => note.id !== action.payload)\n      };\n\n    case types.notesLogoutCleaning:\n      return { ...state,\n        active: null,\n        notes: []\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/david/Escritorio/React/08-journal-app-19/src/reducers/notesReducer.js"],"names":["types","initialState","notes","active","notesReducer","state","action","type","notesActive","payload","notesAddNew","notesLoad","notesUpdate","map","note","id","notesDelete","filter","notesLogoutCleaning"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAwBK,MAAxB,KAAmC;AAC3D,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKP,KAAK,CAACQ,WAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,MAAM,EAAE,EACJ,GAAGG,MAAM,CAACG;AADN;AAFL,OAAP;;AAOJ,SAAKT,KAAK,CAACU,WAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHH,QAAAA,KAAK,EAAE,CAACI,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACH,KAA1B;AAFJ,OAAP;;AAIJ,SAAKF,KAAK,CAACW,SAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHH,QAAAA,KAAK,EAAE,CAAC,GAAGI,MAAM,CAACG,OAAX;AAFJ,OAAP;;AAKJ,SAAKT,KAAK,CAACY,WAAX;AACI,aAAM,EACF,GAAGP,KADD;AAEFH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYW,GAAZ,CACHC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GACFT,MAAM,CAACG,OAAP,CAAeK,IADb,GAEFA,IAHH;AAFL,OAAN;;AAQJ,SAAKd,KAAK,CAACgB,WAAX;AACI,aAAO,EACH,GAAGX,KADA;AAEHF,QAAAA,MAAM,EAAE,IAFL;AAGHD,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYe,MAAZ,CAAmBH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAA9C;AAHJ,OAAP;;AAMJ,SAAKT,KAAK,CAACkB,mBAAX;AACI,aAAM,EACF,GAAGb,KADD;AAEFF,QAAAA,MAAM,EAAE,IAFN;AAGFD,QAAAA,KAAK,EAAE;AAHL,OAAN;;AAMJ;AACI,aAAOG,KAAP;AA7CR;AA+CH,CAhDM","sourcesContent":["import { types } from \"../types/types\";\n\nconst initialState = {\n    notes: [],\n    active: null\n}\n\nexport const notesReducer = (state = initialState , action) => {\n    switch (action.type) {\n        \n        case types.notesActive:\n            return {\n                ...state,\n                active: {\n                    ...action.payload\n                }\n            }\n\n        case types.notesAddNew:\n            return {\n                ...state,\n                notes: [action.payload, ...state.notes]\n            }    \n        case types.notesLoad:\n            return {\n                ...state,\n                notes: [...action.payload]\n            }    \n        \n        case types.notesUpdate:\n            return{\n                ...state,\n                notes: state.notes.map(\n                    note => note.id === action.payload.id \n                        ? action.payload.note\n                        : note\n                )\n            }\n        case types.notesDelete:\n            return {\n                ...state,\n                active: null,\n                notes: state.notes.filter(note => note.id !== action.payload)\n            }        \n\n        case types.notesLogoutCleaning:\n            return{\n                ...state,\n                active: null,\n                notes: []\n\n            }    \n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}