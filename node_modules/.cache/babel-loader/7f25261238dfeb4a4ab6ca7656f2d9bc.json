{"ast":null,"code":"import { db } from \"../firebase/firebase-config\";\nimport { loadNotes } from \"../helpers/loadNotes\";\nimport { types } from \"../types/types\";\nimport Swal from 'sweetalert2';\nimport { fileUpload } from \"../helpers/fileUpload\";\nexport const startNewNote = () => {\n  return async (dispatch, getState) => {\n    const {\n      uid\n    } = getState().auth;\n    const newNote = {\n      title: '',\n      body: '',\n      date: new Date().getTime()\n    };\n    const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\n    dispatch(activeNote(doc.id, newNote));\n  };\n};\nexport const activeNote = (id, note) => ({\n  type: types.notesActive,\n  payload: {\n    id,\n    ...note\n  }\n});\nexport const startLoadingNotes = uid => {\n  return async dispatch => {\n    const notes = await loadNotes(uid);\n    dispatch(setNote(notes));\n  };\n};\nexport const setNote = notes => ({\n  type: types.notesLoad,\n  payload: notes\n});\nexport const startSaveNote = note => {\n  return async (dispatch, getState) => {\n    const {\n      uid\n    } = getState().auth;\n\n    if (!note.url) {\n      delete note.url;\n    }\n\n    const noteToFirestore = { ...note\n    };\n    delete noteToFirestore.id;\n    await db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFirestore);\n    dispatch(refreshNote(note.id, noteToFirestore));\n    Swal.fire('Saved', note.title, 'success');\n  };\n};\nexport const refreshNote = (id, note) => ({\n  type: types.notesUpdate,\n  payload: {\n    id,\n    note: {\n      id,\n      ...note\n    }\n  }\n});\nexport const startUploading = file => {\n  return async (dispatch, getState) => {\n    const {\n      active: activeNote\n    } = getState().notes;\n    const fileUrl = await fileUpload(file);\n    console.log(fileUrl);\n  };\n};","map":{"version":3,"sources":["/home/david/Escritorio/React/08-journal-app-19/src/actions/notes.js"],"names":["db","loadNotes","types","Swal","fileUpload","startNewNote","dispatch","getState","uid","auth","newNote","title","body","date","Date","getTime","doc","collection","add","activeNote","id","note","type","notesActive","payload","startLoadingNotes","notes","setNote","notesLoad","startSaveNote","url","noteToFirestore","update","refreshNote","fire","notesUpdate","startUploading","file","active","fileUrl","console","log"],"mappings":"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","sourcesContent":["import { db } from \"../firebase/firebase-config\";\nimport { loadNotes } from \"../helpers/loadNotes\";\nimport { types } from \"../types/types\";\nimport Swal from 'sweetalert2';\nimport { fileUpload } from \"../helpers/fileUpload\";\n\n\nexport const startNewNote = () =>{\n    return async(dispatch, getState) => {\n\n        const  {uid} = getState().auth;\n\n        const newNote = {\n            title: '',\n            body: '',\n            date: new Date().getTime()\n        }\n\n        const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\n\n        dispatch(activeNote(doc.id, newNote));\n\n    }\n}\n\nexport const activeNote = (id, note) => ({\n    type: types.notesActive,\n    payload: {\n        id,\n        ...note\n    }\n});\n\nexport const startLoadingNotes = (uid) => {\n    return async(dispatch) => {\n        const notes = await loadNotes(uid);\n        dispatch(setNote(notes));\n    }\n}\n\nexport const setNote = (notes) => ({\n    type: types.notesLoad,\n    payload: notes\n});\n\nexport const startSaveNote = (note) => {\n\n    return async(dispatch, getState) => {\n\n        const  {uid} = getState().auth;\n\n        if(!note.url){\n            delete note.url;\n        }\n\n        const noteToFirestore = {...note};\n        delete noteToFirestore.id;\n\n        await db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFirestore);\n\n        dispatch(refreshNote(note.id, noteToFirestore));\n\n        Swal.fire('Saved', note.title, 'success');\n\n    }\n\n}\n\nexport const refreshNote = (id, note) => ({\n    type: types.notesUpdate,\n    payload: {\n        id, \n        note: {\n            id,\n            ...note\n        }\n    }\n});\n\nexport const startUploading = (file) => {\n    return async(dispatch, getState) => {\n         const {active:activeNote} = getState().notes;   \n        const fileUrl = await fileUpload(file);\n\n        console.log(fileUrl);\n    }\n}"]},"metadata":{},"sourceType":"module"}